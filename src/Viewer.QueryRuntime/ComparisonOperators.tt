<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using Viewer.Data;
using Viewer.Query;

namespace Viewer.QueryRuntime
{
    <#
    var operators = new[]{ "<", "<=", "!=", "==", ">=", ">" };
    var operatorSymbol = new[]{ "<", "<=", "!=", "=", ">=", ">" };
    var operatorName = new[]{ "LessThan", "LessThanOrEqual", "NotEqual", "Equal", "GreaterThanOrEqual", "GreaterThan" };
    var types = new[]{ "IntValue", "RealValue", "StringValue", "DateTimeValue" };
    var typeId = new[]{ "Integer", "Real", "String", "DateTime" };
    var valueType = new[]{ "int", "double", "string", "DateTime" };

    for (var i = 0; i < types.Length; ++i)
    {
        for (var j = 0; j < operators.Length; ++j)
        {
    #>
            [Export(typeof(IFunction))]
            public class <#= types[i] #><#= operatorName[j] #>Function : IFunction
            {
                public string Name => "<#= operatorSymbol[j] #>";

                public IReadOnlyList<TypeId> Arguments { get; } = new[]
                {
                    TypeId.<#= typeId[i] #>,
                    TypeId.<#= typeId[i] #>
                };

                public BaseValue Call(IExecutionContext arguments)
                {
                    var lhs = arguments.Get<<#= types[i] #>>(0);
                    var rhs = arguments.Get<<#= types[i] #>>(1);
                    if (lhs?.Value != null && rhs?.Value != null)
                    {
                        var comparison = Comparer<<#= valueType[i] #>>.Default.Compare(
                            (<#= valueType[i] #>)lhs.Value, 
                            (<#= valueType[i] #>)rhs.Value);
                        if (comparison <#= operators[j] #> 0)
                            return new IntValue(1);
                    }
                    return new IntValue(null);
                }
            }
    <# 
        }
    }
    #>
}