<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using Viewer.Data;
using Viewer.Query;

namespace Viewer.QueryRuntime
{
    <#
    var operators = new[]{ "+", "-", "*", "/" };
    var operatorName = new[]{ "Addition", "Subtraction", "Multiplication", "Division" };
    var types = new[]{ "IntValue", "RealValue" };
    var typeId = new []{ "Integer", "Real" };

    for (var i = 0; i < types.Length; ++i)
    {
        // unary minus
    #>
        [Export(typeof(IFunction))]
        public class <#= types[i] #>UnaryMinusFunction : IFunction
        {
            public string Name => "-";

            public IReadOnlyList<TypeId> Arguments { get; } = new[]
            {
                TypeId.<#= typeId[i] #>
            };

            public BaseValue Call(IExecutionContext context)
            {
                var value = context.Get<<#= types[i] #>>(0);
                return new <#= types[i] #>(-value.Value);
            }
        }
    <#

        // binary operators
        for (var j = 0; j < operators.Length; ++j)
        {
    #>
            [Export(typeof(IFunction))]
            public class <#= types[i] #><#= operatorName[j] #>Function : IFunction
            {
                public string Name => "<#= operators[j] #>";

                public IReadOnlyList<TypeId> Arguments { get; } = new[]
                {
                    TypeId.<#= typeId[i] #>,
                    TypeId.<#= typeId[i] #>
                };

                public BaseValue Call(IExecutionContext context)
                {
                    var lhs = context.Get<<#= types[i] #>>(0);
                    var rhs = context.Get<<#= types[i] #>>(1);
                    
                    <# if (operators[j] == "/" && types[i] == "IntValue") { #>
                    if (rhs.Value == 0)
                    {
                        return context.Error("Division by zero.");
                    }
                    <# } #>

                    return new <#= types[i] #>(lhs.Value <#= operators[j] #> rhs.Value);
                }
            }
    <# 
        }
    }
    #>


    [Export(typeof(IFunction))]
    public class StringValueAdditionFunction : IFunction
    {
        public string Name => "+";

        public IReadOnlyList<TypeId> Arguments { get; } = new[]
        {
            TypeId.String,
            TypeId.String
        };

        public BaseValue Call(IExecutionContext arguments)
        {
            var lhs = arguments.Get<StringValue>(0);
            var rhs = arguments.Get<StringValue>(1);
            return new StringValue(lhs.Value + rhs.Value);
        }
    }
}